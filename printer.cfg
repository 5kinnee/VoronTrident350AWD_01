[include mainsail.cfg]                  # Include configuration from mainsail.cfg file
[include backup_config.cfg]             # Include configuration from config_backup.cfg file

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes    # Path to the virtual SD card directory
on_error_gcode: CANCEL_PRINT            # G-code to execute on error (defined in CANCEL_PRINT macro)

[gcode_arcs]
resolution: 0.1                         # Arc interpolation resolution, handles G2/G3 commands

[exclude_object]                        # Exclude object for cancellation

[force_move]
enable_force_move: true                 # Enable force move feature

#####################################################################
##	                 EBB SB2209(RP2040) Config
#####################################################################
[mcu EBBCan]
canbus_uuid: ebc8220876cf              # Unique identifier for the CAN bus interface
# Acceleration sensor on cartographer sensor is recommended, 
# so the configuration of EBB is commented
#[adxl345]
#cs_pin: EBBCan:gpio1                   # Chip select pin
#spi_software_sclk_pin: EBBCan:gpio2    # SPI clock pin
#spi_software_mosi_pin: EBBCan:gpio0    # SPI master out slave in pin
#spi_software_miso_pin: EBBCan:gpio3    # SPI master in slave out pin
#axes_map: z,-y,x                       # Axis mapping settings
##SHAPER_CALIBRATE

[mcu]                                   # Main MCU configuration
#serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_slipper-if00  # Serial port setting, this line is commented out
canbus_uuid: 2c3eb944a16b               # CAN bus UUID
canbus_interface: can0                  # CAN bus interface

#####################################################################
# 	                 Cartographer V3 （ADXL345）
#####################################################################

[scanner]
canbus_uuid: 022f5d4c4378 
#    Fill in the UUID that was just recorded           
x_offset: 0                          
#    adjust for your cartographers offset from nozzle to middle of coil
y_offset: 23                         
#    adjust for your cartographers offset from nozzle to middle of coil
backlash_comp: 0.01291
#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
# 
#   Offsets are measured from the centre of your coil, to the tip of your nozzle 
#   on a level axis. It is vital that this is accurate. 
mode: touch
#    leave this as touch unless you want to use scan only for everything. 
sensor: cartographer
#    this must be set as cartographer unless using IDM etc.
sensor_alt: carto
#    alternate name to call commands. CARTO_TOUCH etc
scanner_touch_z_offset: 0.05         
#    This is the default and will be overwritten and added to the DO NOT SAVE area by using UI to save z offset
mesh_runs: 2
#    Number of passes to make during mesh scan.

[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345             # Specifies ADXL345 accelerometer for resonance testing
probe_points:
    175, 175, 20                # Coordinates of the probe points for resonance testing

#####################################################################
##	                 Temperature Monitoring
#####################################################################
[temperature_sensor EBB_NTC]            # EBB_NTC temperature sensor configuration
sensor_type: Generic 3950               # Sensor type
sensor_pin: EBBCan:gpio28               # Sensor pin

[temperature_sensor BTT-MCU]            # BTT-MCU temperature sensor configuration       
sensor_type: temperature_mcu            # Sensor type

[temperature_sensor SOC]                # BTT-PI temperature sensor configuration
sensor_type: temperature_host           # Sensor type

#####################################################################
##                     Model and Acceleration
#####################################################################
[printer]                             # Printer configuration
kinematics: corexy                    # Printer type: corexy
max_velocity: 600                     # Maximum velocity (max 300)
max_accel: 5000                       # Maximum acceleration (max 4000)  **was set to 10000, reduced to 5000
max_z_velocity: 50                    # Maximum Z-axis velocity
max_z_accel: 100                      # Maximum Z-axis acceleration
minimum_cruise_ratio: 0.5             # Default 0.5
square_corner_velocity: 10            # Square corner velocity  **was set to 25, reduced to 10

#####################################################################
##                            X Axis
#####################################################################

[stepper_x]
step_pin: PE6                         # X-axis motor pulse pin setting
dir_pin: !PE5                         # X-axis motor direction pin setting
enable_pin: !PC14                     # X-axis motor enable pin setting
microsteps: 32                        # Motor microsteps setting
rotation_distance: 40                 # Active pulley circumference mm (2GT-20T pulley 40, 2GT-16T pulley 32)
full_steps_per_rotation: 200          # Number of pulses required for a single motor revolution (1.8 degree motor: 200, 0.9 degree motor: 400)
endstop_pin: EBBCan:gpio24            # Limit switch PIN setting (X-)
position_min: 0                       # X-axis minimum travel - software limit
position_endstop: 350                 # Mechanical reset point coordinates for X-axis
position_max: 350                     # X-axis maximum travel - software limit
homing_speed: 150                     # Homing speed maximum 100
homing_retract_dist: 5                # Setback distance after the first trigger of the homing switch
homing_positive_dir: true             # Direction of homing (generally no change required)

[tmc2240 stepper_x]
cs_pin: PC13                          # Chip select pin
spi_software_sclk_pin: PG8            # SPI clock pin
spi_software_mosi_pin: PG6            # SPI master out slave in pin
spi_software_miso_pin: PG7            # SPI master in slave out pin
driver_TPFD: 0                        # Driver setting
run_current: 1.5                      # Running current
interpolate: True                     # Interpolation


[stepper_x1]
step_pin: PD4                         # X1-axis motor pulse pin setting
dir_pin: !PD3                         # X1-axis motor direction pin setting
enable_pin: !PD6                      # X1-axis motor enable pin setting
microsteps: 32                        # Motor microsteps setting
rotation_distance: 40                 # Active pulley circumference mm (2GT-20T pulley 40, 2GT-16T pulley 32)
full_steps_per_rotation: 200          # Number of pulses required for a single motor revolution (1.8 degree motor: 200, 0.9 degree motor: 400)

[tmc2240 stepper_x1]
cs_pin: PD5                           # Chip select pin
spi_software_sclk_pin: PG8            # SPI clock pin
spi_software_mosi_pin: PG6            # SPI master out slave in pin
spi_software_miso_pin: PG7            # SPI master in slave out pin
driver_TPFD: 0                        # Driver setting
run_current: 1.5                      # Running current
interpolate: True                     # Interpolation

#####################################################################
##                           Y Aixs
#####################################################################

[stepper_y]
step_pin: PC7                         # Y-axis motor pulse pin setting
dir_pin: !PC8                         # Y-axis motor direction pin setting
enable_pin: !PD2                      # Y-axis motor enable pin setting
microsteps: 32                        # Motor microsteps setting
rotation_distance: 40                 # Active pulley circumference mm (2GT-20T pulley 40, 2GT-16T pulley 32)
full_steps_per_rotation: 200          # Number of pulses required for a single motor revolution (1.8 degree motor: 200, 0.9 degree motor: 400)
endstop_pin: PF2                      # Limit switch PIN setting (Y-)
position_min: 0                       # Y-axis minimum travel - software limit
position_endstop: 350                 # Mechanical reset point coordinates for Y-axis (change to 350 for 350 models)
position_max: 350                     # Y-axis maximum travel - software limit (change to 350 for 350 models)
homing_speed: 150                     # Homing speed maximum 100
homing_retract_dist: 5                # Setback distance after the first trigger of the homing switch
homing_positive_dir: true             # Direction of homing (generally no change required)

[tmc2240 stepper_y]
cs_pin: PC6                           # Chip select pin
spi_software_sclk_pin: PG8            # SPI clock pin
spi_software_mosi_pin: PG6            # SPI master out slave in pin
spi_software_miso_pin: PG7            # SPI master in slave out pin
driver_TPFD: 0                        # Driver setting
run_current: 1.5                      # Running current
interpolate: True                     # Interpolation

[stepper_y1]
step_pin: PE2                         # Y1-axis motor pulse pin setting
dir_pin: !PE1                         # Y1-axis motor direction pin setting
enable_pin: !PE4                      # Y1-axis motor enable pin setting
microsteps: 32                        # Motor microsteps setting
rotation_distance: 40                 # Active pulley circumference mm (2GT-20T pulley 40, 2GT-16T pulley 32)
full_steps_per_rotation: 200          # Number of pulses required for a single motor revolution (1.8 degree motor: 200, 0.9 degree motor: 400)

[tmc2240 stepper_y1]
cs_pin: PE3                           # Chip select pin
spi_software_sclk_pin: PG8            # SPI clock pin
spi_software_mosi_pin: PG6            # SPI master out slave in pin
spi_software_miso_pin: PG7            # SPI master in slave out pin
driver_TPFD: 0                        # Driver setting
run_current: 1.5                      # Running current
interpolate: True                     # Interpolation


#####################################################################
#    -------z1------- 
#   |                 |
#   |                 |
#   |                 |
#   |                 |
#   |                 |
#   |                 |
#  z0---   display ---z2
#####################################################################
##                  Z0 Axis
#####################################################################
[stepper_z]
step_pin: PB8                         # Z0-axis motor pulse pin setting
dir_pin: !PB7                         # Z0-axis motor direction pin setting
enable_pin: !PE0                      # Z0-axis motor enable pin setting
microsteps: 16                        # Motor microsteps setting
rotation_distance: 4                  # Active pulley circumference mm
endstop_pin: probe:z_virtual_endstop  # Limit switch PIN setting (Z0-)
position_max: 235                     # Z0-axis maximum travel - software limit
position_min: -5.0                    # Z0-axis minimum travel - software limit
homing_speed: 20                      # Homing speed
homing_retract_dist: 0                # Setback distance after the first trigger of the homing switch
homing_positive_dir: False            # Direction of homing (generally no change required)

#--------------------------------------------------------------------
[tmc2209 stepper_z]                   # TMC2209 driver settings
uart_pin: PB9                         # Driver communication port
interpolate: true                     # Enable 256 microstep interpolation
run_current: 0.8                      # Motor running current (mA)
hold_current: 0.8                     # Holding current (mA)

#--------------------------------------------------------------------
[stepper_z1]
step_pin: PB4                         # Z1-axis motor pulse pin setting
dir_pin: !PB3                         # Z1-axis motor direction pin setting
enable_pin: !PB6                      # Z1-axis motor enable pin setting
microsteps: 16                        # Motor microsteps setting
rotation_distance: 4                  # Active pulley circumference mm

#--------------------------------------------------------------------
[tmc2209 stepper_z1]                  # TMC2209 driver settings
uart_pin: PB5                         # Driver communication port
interpolate: true                     # Enable 256 microstep interpolation
run_current: 0.8                      # Motor running current (mA)
hold_current: 0.8                     # Holding current (mA)

#--------------------------------------------------------------------
[stepper_z2]
step_pin: PG13                        # Z2-axis motor pulse pin setting
dir_pin: !PG12                        # Z2-axis motor direction pin setting
enable_pin: !PG15                     # Z2-axis motor enable pin setting
microsteps: 16                        # Motor microsteps setting
rotation_distance: 4                  # Active pulley circumference mm

#--------------------------------------------------------------------
[tmc2209 stepper_z2]                  # TMC2209 driver settings
uart_pin: PG14                        # Driver communication port
interpolate: true                     # Enable 256 microstep interpolation
run_current: 0.8                      # Motor running current (mA)
hold_current: 0.8                     # Holding current (mA)

#####################################################################
##                  Extruder Motor
#####################################################################

[extruder]
step_pin: EBBCan:gpio18              # Step pin
dir_pin: EBBCan:gpio19               # Direction pin, "!" indicates logic inversion
enable_pin: !EBBCan:gpio17           # Enable pin, "!" indicates logic inversion
full_steps_per_rotation: 200         # Number of pulses required for a single motor revolution (1.8 degree motor: 200, 0.9 degree motor: 400)
microsteps: 16                       # Microsteps setting
## When calibrating the extruder, update the following value
## Assume you request 100mm feed but get 98mm,
## New value = old value x (actual extruded length / target length)
## 22.6789511 is our recommended value
gear_ratio: 50:10                    # Gear ratio
rotation_distance: 22.6325831        # Rotation distance
nozzle_diameter: 0.400               # Nozzle diameter
filament_diameter: 1.750             # Filament diameter
heater_pin: EBBCan:gpio7             # Heater pin
#control: pid                        # Control method
#pid_Kp: 24.328                      # Proportional parameter of the PID controller
#pid_Ki: 1.908                       # Integral parameter of the PID controller
#pid_Kd: 77.543                      # Derivative parameter of the PID controller
min_temp: 0                          # Minimum temperature  (was default of 120)
max_temp: 350                        # Maximum temperature
min_extrude_temp: 170                # Minimum extrude temperature
pressure_advance: 0.03               # Pressure advance - try to keep pressure below 1.0  (NOTE: currently overridden by PRINT_START based on nozzle diameter)
pressure_advance_smooth_time: 0.040  # Pressure advance smooth time - default is 0.040
## Nozzle temperature PID calibration command: "PID_CALIBRATE HEATER=extruder TARGET=245"
sensor_type: MAX31865                # Temperature sensor type
sensor_pin: EBBCan:gpio9             # Sensor pin
spi_software_sclk_pin: EBBCan:gpio10 # SPI clock pin
spi_software_mosi_pin: EBBCan:gpio8  # SPI master out slave in pin
spi_software_miso_pin: EBBCan:gpio11 # SPI master in slave out pin
rtd_nominal_r: 100                   # RTD nominal resistance
rtd_reference_r: 430                 # RTD reference resistance
rtd_num_of_wires: 2                  # Number of wires for the RTD

[tmc2209 extruder]
uart_pin: EBBCan:gpio20              # UART communication pin
interpolate: true                    # Enable 256 microstep interpolation
run_current: 0.60                    # Running current

#--------------------------------------------------------------------
[verify_heater extruder]             # Heater block temperature tolerance configuration
max_error: 120                       # Maximum error
check_gain_time: 120                 # Tolerance time
hysteresis: 50                       # Tolerance temperature
heating_gain: 2                      # Heating gain

#####################################################################
##                  Heated Bed
#####################################################################
[heater_bed]
heater_pin: PA1                      # (BE0) Heater pin
sensor_pin: PB1                      # Sensor interface (TB) sensor pin
sensor_type: ATC Semitec 104GT-2     # ATC Semitec 104GT-2 temperature sensor type
#control: pid                        # Control method
## Heated bed temperature PID calibration command: "PID_CALIBRATE HEATER=heater_bed TARGET=100"
#pid_kp: 53.467                      # PID Kp value
#pid_ki: 0.931                       # PID Ki value
#pid_kd: 767.921                     # PID Kd value
min_temp: 0                          # Minimum temperature  (was default of 120)
max_temp: 135                        # Maximum temperature
max_power: 1.0                       # Maximum power

#####################################################################
##                          Idle Timeout for Heated Bed
#####################################################################

[idle_timeout]
timeout: 1800                        # Turn off heated bed if idle for more than 30 minutes

#####################################################################
##                  Bed Mesh Calibration
#####################################################################

[bed_mesh]
zero_reference_position: 175,175  
#    This option is suitable for the 350 model. 
#    set this to the middle of your bed
speed: 200
#    movement speed of toolhead during bed mesh
horizontal_move_z: 5
#    height of scanner during bed mesh scan
mesh_min: 40, 40        # **was set to 30, 30...moved to 40, 40 along with mesh_max)
#    start point of bed mesh [X, Y]
mesh_max: 310, 310        # **was set to 320, 320...moved to 310, 310 along with mesh_min)
#    end point of bed mesh [X, Y]
probe_count: 12, 12    # **was set to 30, 30, which is a bit excessive as per Cartographer documentation
algorithm: bicubic

#####################################################################
##                  Fans
#####################################################################

[heater_fan hotend_fan]          # Hotend fan
pin: EBBCan:gpio14               # Hotend fan pin
heater: extruder                 # Associated heating device
heater_temp: 50.0                # Temperature to start the fan
cycle_time: 0.00003                 # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time

#--------------------------------------------------------------------

[heater_fan Skirt_fan]            # Skirt fan 
pin: PF9                         # FAN-2
cycle_time: 0.00003                 # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time
shutdown_speed: 0.0              # Closing speed (Please do not change)
kick_start_time: 0.5             # start-up time (Please do not change)
heater: heater_bed               # Related equipment: heater_bed
heater_temp: 50                  # How many degrees does the heat bed reach to activate the fan
fan_speed: 0.5                   # Fan speed

#--------------------------------------------------------------------

[controller_fan driver_fan]      # Driver cooling fan
pin: PF6                         # Fan pin 
cycle_time: 0.00003                 # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time
max_power: 1.0                   # Maximum power
shutdown_speed: 0.0              # Shutdown speed
fan_speed: 0.8                   # Fan speed when heater or stepper driver is active (0.0 to 1.0). Default is 1.0.
idle_timeout: 90                 # Time in seconds to keep the fan running after the stepper driver or heater is no longer active. Default is 30 seconds.
idle_speed: 0.4                  # Fan speed after the stepper driver is no longer active and before idle_timeout is reached (0.0 to 1.0). Default is fan_speed.
stepper: stepper_x               # Active motors
#Define the name of the heater/stepper configuration section associated with this fan. 
#If a comma-separated list of heater/stepper names is provided here, the fan will be enabled when any of the given heaters/steppers are enabled.
#The default heater is "extruder", and the default stepper is all steppers.

#--------------------------------------------------------------------

#Note: The following FAN0/FAN1/FAN2 settings are only applicable when using OrcaSlicer,
#as only OrcaSlicer allows for the additional configuration of parts cooling fans and filter fans. 
#If you use other slicing software, please comment out the following configurations.
# instead of using [fan], we define the default part cooling fan with [fan_generic] here
# this is the default part cooling fan

[fan_generic Fan_SBtop]          # 5015 Part cooling Blower on StealthBurner Top side 
pin: EBBCan:gpio13               # Fan pin 
cycle_time: 0.00003                # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time
hardware_pwm: false              # hardware pwm

#--------------------------------------------------------------------

[fan_generic Fan_Aux_Side]       # 12032 Auxiliary Part cooling Blower 
pin: PA0                         # Fan pin
cycle_time: 0.00003                 # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time
hardware_pwm: false              # hardware pwm
kick_start_time: 0.5             # start-up time (Please do not change)

#--------------------------------------------------------------------

[fan_generic fan_FumePack]       # Fume_Pack Exhaust Fan
pin: PF7                         # Fan pin     
cycle_time: 0.00003                 # Cycle time   **was set to 0.00003 ... changed to 0.01 after issues and reading: https://www.klipper3d.org/Config_Reference.html#pwm_cycle_time
hardware_pwm: false              # hardware pwm
kick_start_time: 0.5             # start-up time (Please do not change)

#--------------------------------------------------------------------

[input_shaper]
shaper_freq_x: 90.8     # center frequency for the X axis filter
shaper_type_x: mzv      # filter type for the X axis
shaper_freq_y: 72.8     # center frequency for the Y axis filter
shaper_type_y: mzv      # filter type for the Y axis
damping_ratio_x: 0.059  # damping ratio for the X axis
damping_ratio_y: 0.066  # damping ratio for the Y axis

#---------------------------------------------------------------------

[gcode_macro M106]
# gcode:
#     {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#     {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#     SET_FAN_SPEED FAN={fan} SPEED={speed}
gcode:
    {% set P = params.P|default(0)|int %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    
    # Map P values to the new fan names
    {% if P == 0 %}
        {% set fan = "Fan_SBtop" %}
    {% elif P == 2 %}
        {% set fan = "Fan_Aux_Side" %}
    {% elif P == 3 %}
        {% set fan = "fan_FumePack" %}
    {% else %}
        {% set fan = "Fan_SBtop" %}  # Default to main part cooling fan
    {% endif %}
    
    SET_FAN_SPEED FAN={fan} SPEED={speed}

#####################################################################
##                            RGB-LED Lights
#####################################################################

[neopixel LED_Hotend]
pin: EBBCan:gpio16            # LED pin
chain_count: 3                # Number of LEDs
color_order: GRBW             # Color order
initial_RED: 0.2              # Initial red brightness
initial_GREEN: 0.2            # Initial green brightness
initial_BLUE: 0.2             # Initial blue brightness

[neopixel LED_DiscoSticks]
pin: PD15                     # Signal interface
chain_count: 36               # Number of LEDs
color_order: GRBW              # Color order
initial_RED: 0.2              # Default value for red light at startup, maximum is 1
initial_GREEN: 0.2            # Default value for green light at startup, maximum is 1
initial_BLUE: 0.2             # Default value for blue light at startup, maximum is 1
initial_WHITE: 0.2             # Default value for white light at startup, maximum is 1

[gcode_macro HOTEND_LED_ON]
description: Turn on hotend LEDs with adjustable color and intensity
gcode:
    {% set red = params.RED|default(0.2)|float %}
    {% set green = params.GREEN|default(1.0)|float %}
    {% set blue = params.BLUE|default(1.0)|float %}
    {% set white = params.WHITE|default(0.0)|float %}
    {% set intensity = params.INTENSITY|default(1.0)|float %}
    
    # Apply intensity scaling to all colors
    {% set red = (red * intensity)|round(3) %}
    {% set green = (green * intensity)|round(3) %}
    {% set blue = (blue * intensity)|round(3) %}
    {% set white = (white * intensity)|round(3) %}
    
    # Cap values at 1.0
    {% set red = [red, 1.0]|min %}
    {% set green = [green, 1.0]|min %}
    {% set blue = [blue, 1.0]|min %}
    {% set white = [white, 1.0]|min %}
    
    #STOP_LED_EFFECTS                            # Stop any running effects first
    SET_LED LED=LED_Hotend RED={red} GREEN={green} BLUE={blue} WHITE={white}
    RESPOND TYPE=command MSG="Hotend LEDs: R={red} G={green} B={blue} W={white}"

[gcode_macro DISCO_LED_ON]
description: Turn on disco stick LEDs with adjustable color and intensity
gcode:
    {% set red = params.RED|default(0.8)|float %}
    {% set green = params.GREEN|default(0.8)|float %}
    {% set blue = params.BLUE|default(0.8)|float %}
    {% set white = params.WHITE|default(0.8)|float %}
    {% set intensity = params.INTENSITY|default(0.8)|float %}
    
    # Apply intensity scaling to all colors
    {% set red = (red * intensity)|round(3) %}
    {% set green = (green * intensity)|round(3) %}
    {% set blue = (blue * intensity)|round(3) %}
    {% set white = (white * intensity)|round(3) %}
    
    # Cap values at 1.0
    {% set red = [red, 1.0]|min %}
    {% set green = [green, 1.0]|min %}
    {% set blue = [blue, 1.0]|min %}
    {% set white = [white, 1.0]|min %}
    
    #STOP_LED_EFFECTS                            # Stop any running effects first
    SET_LED LED=LED_DiscoSticks RED={red} GREEN={green} BLUE={blue} WHITE={white}
    RESPOND TYPE=command MSG="Disco LEDs: R={red} G={green} B={blue} W={white}"

[gcode_macro HOTEND_LED_STATUS]
description: Set first LED green, second and third LEDs white
gcode:
    {% set green_intensity = params.GREEN|default(0.8)|float %}
    {% set white_intensity = params.WHITE|default(0.8)|float %}
    
    # Cap intensities between 0.0 and 1.0
    {% set green_intensity = [green_intensity, 1.0]|min %}
    {% set green_intensity = [green_intensity, 0.0]|max %}
    {% set white_intensity = [white_intensity, 1.0]|min %}
    {% set white_intensity = [white_intensity, 0.0]|max %}
    
    # Set first LED to green
    SET_LED LED=LED_Hotend RED=0 GREEN={green_intensity} BLUE=0 WHITE=0 INDEX=1 TRANSMIT=0
    
    # Set second LED to white
    SET_LED LED=LED_Hotend RED=0 GREEN=0 BLUE=0 WHITE={white_intensity} INDEX=2 TRANSMIT=0
    
    # Set third LED to white and transmit all changes
    SET_LED LED=LED_Hotend RED=0 GREEN=0 BLUE=0 WHITE={white_intensity} INDEX=3 TRANSMIT=1
    RESPOND TYPE=command MSG="Hotend LEDs: LED1=Green({(green_intensity*100)|int}%), LED2&3=White({(white_intensity*100)|int}%)"

[gcode_macro HOTEND_LED_OFF]
description: Turn off hotend LEDs
gcode:
    SET_LED LED=LED_Hotend RED=0 GREEN=0 BLUE=0 WHITE=0
    RESPOND TYPE=command MSG="Hotend LEDs turned off"

[gcode_macro HOTEND_LED_WHITE]
description: Set hotend LEDs to white with adjustable intensity
gcode:
    {% set intensity = params.INTENSITY|default(0.8)|float %}
    {% set intensity = [intensity, 1.0]|min %}
    {% set intensity = [intensity, 0.0]|max %}
    
    SET_LED LED=LED_Hotend RED=0 GREEN=0 BLUE=0 WHITE={intensity}
    RESPOND TYPE=command MSG="Hotend LEDs set to white at {(intensity*100)|int}% intensity"

[gcode_macro DISCO_WHITE_ON]
description: Turn on white LEDs with adjustable intensity (0.0-1.0)
gcode:
    {% set intensity = params.INTENSITY|default(0.8)|float %}
    {% set intensity = [intensity, 1.0]|min %}  # Cap at 1.0
    {% set intensity = [intensity, 0.0]|max %}  # Floor at 0.0
    
    #STOP_LED_EFFECTS                            # Stop any running effects first
    SET_LED LED=LED_DiscoSticks RED=0 GREEN=0 BLUE=0 WHITE={intensity}
    RESPOND TYPE=command MSG="White LEDs set to {(intensity*100)|int}% intensity"

[gcode_macro LIGHTS_OFF]
description: Turn off all LEDs
gcode:
    #STOP_LED_EFFECTS
    SET_LED LED=LED_DiscoSticks RED=0 GREEN=0 BLUE=0 WHITE=0
    RESPOND TYPE=command MSG="All LEDs turned off"

[gcode_macro DISCO_WHITE_DIM]
description: Set white LEDs to dim level (25%)
gcode:
    WHITE_LIGHT_ON INTENSITY=0.25

# [gcode_macro WHITE_LIGHT_MEDIUM]
# description: Set white LEDs to medium level (50%)
# gcode:
#     WHITE_LIGHT_ON INTENSITY=0.5

# [gcode_macro WHITE_LIGHT_BRIGHT]
# description: Set white LEDs to bright level (80%)
# gcode:
#     WHITE_LIGHT_ON INTENSITY=0.8

[gcode_macro DISCO_WHITE_MAX]
description: Set white LEDs to maximum brightness (100%)
gcode:
    WHITE_LIGHT_ON INTENSITY=1.0

# [gcode_macro BLUE_LIGHT_ON]
# description: Turn on blue LEDs with adjustable intensity (0.0-1.0)
# gcode:
#     {% set intensity = params.INTENSITY|default(0.8)|float %}
#     {% set intensity = [intensity, 1.0]|min %}  # Cap at 1.0
#     {% set intensity = [intensity, 0.0]|max %}  # Floor at 0.0
    
#     STOP_LED_EFFECTS                            # Stop any running effects first
#     SET_LED LED=LED_DiscoSticks RED=0 GREEN=0 BLUE={intensity} WHITE=0
#     RESPOND TYPE=command MSG="Blue LEDs set to {(intensity*100)|int}% intensity"

[gcode_macro DISCO_BLUE_DIM]
description: Set blue LEDs to dim level (25%)
gcode:
    BLUE_LIGHT_ON INTENSITY=0.25

# [gcode_macro STOP_LED_EFFECTS]
# description: Stop all LED effects
# gcode:
#     STOP_LED_EFFECTS

# [gcode_macro Rainbow_LED]
# gcode:
#     SET_LED_EFFECT EFFECT=rainbow_Sticks

# [led_effect rainbow_Sticks] 
# leds:    
#   neopixel:LED_DiscoSticks
# layers:
#   gradient 0.50 0.50 top (1,0,0),(0,1,0),(0,0,1) 
# frame_rate: 10

# [led_effect extruder_temp]
# leds:
#     neopixel:LED_DiscoSticks
# layers:
#     heater 0.50 0.50 top (0.0,1.0,0.0),(1.0,0.0,0.0),(0.0,0.0,1.0)
# frame_rate: 10
# heater: extruder
# autostart: true

# [led_effect bed_heating]
# leds:
#     neopixel:LED_DiscoSticks
# layers:
#     heater 0.50 0.50 top (0.0,1.0,0.0),(1.0,0.0,0.0),(0.0,0.0,1.0)
# frame_rate: 10
# heater: heater_bed
# autostart: true

# [led_effect progress_bar]
# leds:
#     neopixel:LED_DiscoSticks
# autostart: true
# frame_rate:                        10
# layers:
#     progress  -1  0 add         ( 0, 0,   1),( 0, 0.1, 0.6)
#     static     0  0 top         ( 0, 0, 0.1)


####################################################################################
##                                    Homing Override
####################################################################################
[homing_override]
axes: z                    # Override homing for the Z axis only
set_position_z: 0           # Set the Z position to 0 after homing
gcode:
    G90                     # Set to absolute positioning mode
    G0 Z10 F1200            # Move Z axis to 10mm above the bed at 1200 mm/min
    G28 Y                   # Home Y axis
    G28 X                   # Home X axis
    G1 X175 Y175 F7200      # Move to a specific coordinate (125, 125) at 7200 mm/min
    G28 Z                   # Home Z axis again

####################################################################################
##                                    Z Tilt Adjustment
####################################################################################
[z_tilt]
##  Use Z_TILT_ADJUST to level the bed.
##  z_positions: Location of toolhead
z_positions:
   -50, 18
   175, 398
   400, 18
points:
   50, 50
   175, 300
   300, 50
##--------------------------------------------------------------------

speed: 300                 # Speed of Z tilt adjustment
horizontal_move_z: 2       # Z axis move speed for adjustments
retries: 8                 # Number of retries for adjustment points
retry_tolerance: 0.075     # Retry tolerance for adjustment accuracy  **was set to 0.0075 by default

####################################################################################
####################################################################################
[gcode_macro Z_TILT_ADJUST]     # IDM/Cartographer optimized 3Z leveling macro
rename_existing: _Z_TILT_ADJUST
gcode:
    SAVE_GCODE_STATE NAME=STATE_Z_TILT         # Save current state for Z tilt adjustment
    BED_MESH_CLEAR                             # Clear bed mesh
    {% if not printer.z_tilt.applied %}
      _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1   # Adjust Z tilt with higher tolerance initially
    {% endif %}
    _Z_TILT_ADJUST horizontal_move_z=2          # Fine-tune Z tilt adjustment
    RESTORE_GCODE_STATE NAME=STATE_Z_TILT       # Restore saved state after adjustment

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

####################################################################################
##                               Probe Calibration Macro
####################################################################################
[gcode_macro PROBECALIBRATE]
# Defines a G-code macro for probe calibration
gcode:
    G28                          # Home all axes
    G0 X175 Y175 Z1 F3600        # Fast move to X150 Y150 Z1 at 3600 mm/min
    PROBE_CALIBRATE              # Start probe calibration

####################################################################################
##                               Bed Leveling and Height Calibration Macro
####################################################################################
[gcode_macro Z_MESH_CALIBRATE]
# Defines a G-code macro for bed leveling and height calibration
gcode:
    BED_MESH_CLEAR               # Clear bed mesh
    G28                          # Home all axes
    Z_TILT_ADJUST                # Perform gantry leveling
    G28                          # Home all axes
    G0 X175 Y175 Z30 F3600       # Fast move to X150 Y150 Z30 at 3600 mm/min

#--------------------------------------------------------------------
[gcode_macro DRAW_LINES]
gcode:
    G90                           # Absolute positioning
    # G92 E0                      # Reset Extruder (commented out for now)
    # G1 Z5.0  F7200              # Move Z Axis up (commented out for now)
    G1 X50  Y0         F7200      # Move to start position
    M83                           # Set extruder to relative mode
    G1 E15 F400                   # Extrude filament
    G1 Z0.28 F7200                # Lower Z axis
    G1 X200 Y0   Z0.28 F1200 E17  # Draw the first line
    G1 X200 Y0.4 Z0.28 F2400      # Move to side a little
    G1 X55  Y0.4 Z0.28 F1200 E34  # Draw the second line
    G92 E0                        # Reset Extruder
    G90                           # Return to absolute positioning

#--------------------------------------------------------------------

[gcode_macro PRINT_START]
gcode:
  {% set target_bed = params.BED|int %}                  # Target bed temperature
  {% set target_extruder = params.EXTRUDER|int %}        # Target nozzle temperature
  {% set nozzle_size = params.NOZZLE|default(0.4)|float %}  # Nozzle size from slicer
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}  # Bed center X
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}  # Bed center Y
  {% set nozzle_preheat = 80 %}                         # Preheat temperature for nozzle
  {% set calibration_bed_temp = 80 %}                    # Calibration bed temperature

  SET_GCODE_OFFSET Z=0                                   # Reset Z offset
  G28                                                    # Home all axes
  G90                                      # Calibrate Z offset

  SET_DISPLAY_TEXT MSG="Calibrating Z Offset"            # Display Z offset calibration message
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=100           # Ensure nozzle is cool enough for probing
  CARTOGRAPHER_TOUCH

  # Heat bed and nozzle to calibration temperatures (80°C bed, 80°C nozzle)
  SET_DISPLAY_TEXT MSG="Heating for Calibration - Bed: {calibration_bed_temp}C, Nozzle: {nozzle_preheat}C"
  G1 X{x_wait} Y{y_wait} Z15 F9000                       # Move to bed center
  
  # Start heating both bed and nozzle simultaneously
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={calibration_bed_temp}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_preheat}
  
  # Wait for both to reach calibration temperatures
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={calibration_bed_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={nozzle_preheat}
  
  # Sync motors via the Klipper installed Script - SYNC_MOTORS
  G28 X Y
  SET_DISPLAY_TEXT MSG="Synchronizing Motors"
  SYNC_MOTORS_CHECK                                     # skip calibration if sync has been run this session
  G4 P3000                                              # Add a 3-second delay (3000 milliseconds)

  SET_DISPLAY_TEXT MSG="Leveling..."                    # Display leveling message
  Z_TILT_ADJUST                                         # Perform Z tilt adjustment
  G28 Z 
  G4 P3000
 
  SET_DISPLAY_TEXT MSG="Bed Mesh Calibration"           # Display mesh calibration message
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5       # Perform adaptive bed mesh calibration with a margin of 5mm   
  G4 P3000
 
   # Now heat bed to final temperature from slicer and start heating nozzle when bed is at 90% of target
  SET_DISPLAY_TEXT MSG="Heating Bed to Final Temp: {target_bed}C"
  {% set bed_temp_threshold = target_bed * 0.9 %}        # Calculate 90% of target bed temp

  # Start heating bed without waiting
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}

  # Wait until bed reaches 80% of target temperature
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp_threshold}

  # Start heating the nozzle once bed is at 80%
  SET_DISPLAY_TEXT MSG="Pre-heating Nozzle while Bed Finishes"
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder}

  # Wait for bed to reach final temperature
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}

  # Now wait for nozzle to reach target temperature
  SET_DISPLAY_TEXT MSG="Waiting for Nozzle: {target_extruder}C"
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder}

  # Set pressure advance based on nozzle size from slicer
  {% if nozzle_size == 0.4 %}
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    RESPOND TYPE=command MSG="Setting Pressure Advance for 0.4mm nozzle: 0.04"
  {% elif nozzle_size == 0.6 %}
    SET_PRESSURE_ADVANCE ADVANCE=0.03
    RESPOND TYPE=command MSG="Setting Pressure Advance for 0.6mm nozzle: 0.03"
  {% elif nozzle_size == 0.8 %}
    SET_PRESSURE_ADVANCE ADVANCE=0.02
    RESPOND TYPE=command MSG="Setting Pressure Advance for 0.8mm nozzle: 0.02"
  {% else %}
    SET_PRESSURE_ADVANCE ADVANCE=0.03  # Default pressure advance for other nozzle sizes
    RESPOND TYPE=command MSG="Using default Pressure Advance: 0.03 for nozzle size: {nozzle_size}mm"
  {% endif %}

  SET_DISPLAY_TEXT MSG="Preparing to Print..."           # Display preparation message
  G0 X{x_wait - 50} Y4 F10000                            # Move to primeline start point
  G0 Z0.4                                                # Raise Z to 0.4mm
  G91                                                    # Switch to relative positioning
  G1 X100 E20 F1000                                      # Extrude primeline
  G90                                                    # Switch back to absolute positioning

#--------------------------------------------------------------------

[gcode_macro HEAT_SOAK]
description: Heat soak the bed for a specified time (default: 10 minutes)
gcode:
    {% set TEMP = params.TEMP|default(110)|int %}
    {% set DURATION = params.DURATION|default(10)|int %}
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set z_safe = 50 %}
    
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                     # Home all axes if not already homed
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Starting {DURATION}min heat soak at {TEMP}C"
    RESPOND TYPE=command MSG="Starting {DURATION} minute heat soak at {TEMP}C"
    
    # Move to center of bed at safe height
    G90                                         # Absolute positioning
    G1 X{x_center} Y{y_center} Z{z_safe} F3600  # Move to center position
    
    # Turn on all fans to circulate heat
    SET_FAN_SPEED FAN=Fan_SBtop SPEED=1.0      # 100% StealthBurner top fan
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=1.0   # 100% auxiliary fan
    SET_FAN_SPEED FAN=fan_FumePack SPEED=1.0   # 100% fume pack fan
    
    # Start heating the bed
    M140 S{TEMP}                                # Set bed temperature without waiting
    
    # Wait for bed to reach temperature before starting the soak timer
    SET_DISPLAY_TEXT MSG="Waiting for bed to reach {TEMP}C"
    RESPOND TYPE=command MSG="Waiting for bed to reach {TEMP}C"
    M190 S{TEMP}                                # Wait for bed to reach temperature
    
    # Start the heat soak
    SET_DISPLAY_TEXT MSG="Heat soaking for {DURATION} minutes"
    RESPOND TYPE=command MSG="Heat soaking for {DURATION} minutes"
        
    # Display countdown every minute
    {% for minute in range(DURATION, 0, -1) %}
        G4 P60000                               # Wait 1 minute (60,000ms)
        SET_DISPLAY_TEXT MSG="Heat soak: {minute-1} min remaining"
        RESPOND TYPE=command MSG="{minute-1} minutes of heat soak remaining"
    {% endfor %}
    
    # Heat soak complete
    SET_DISPLAY_TEXT MSG="Heat soak complete"
    RESPOND TYPE=command MSG="Heat soak complete"
    
    # Turn off all fans (they'll be controlled by the print process)
    SET_FAN_SPEED FAN=Fan_SBtop SPEED=0.0
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=0.0
    # Note: We don't turn off the fume pack fan as it may be needed for ASA/ABS printing

#--------------------------------------------------------------------

[gcode_macro NOZZLE_WIPE]
description: Wipe the nozzle on the purge bucket brush
gcode:
    {% set wipe_count = params.WIPE_COUNT|default(5)|int %}  # Number of wipe passes. Default is 5.
    {% set wipe_temp = params.TEMP|default(200)|int %}    # Temperature to heat the nozzle for wiping. Default is 0C.
    {% set x_start = 40 %}
    {% set x_end = 80 %}
    {% set y_wipe = 349 %}
    {% set z_wipe = 3 %}  # Z height during wipe
    {% set wipe_spd = 1200 %}  # Speed of wipe (mm/min)
    {% set travel_spd = 9000 %}  # Speed of travel moves (mm/min)
    
    # Save current position
    SAVE_GCODE_STATE NAME=WIPE_state
    
    # If a temperature is specified, wait until the extruder reaches it
    {% if wipe_temp > 0 %}
        # Don't heat if already at or above target
        {% if printer.extruder.temperature < wipe_temp %}
            M109 S{wipe_temp}  # Wait for extruder to reach temp
        {% endif %}
    {% endif %}
    
    # Move to safe approach position first
    G90  # Absolute positioning
    G0 Z{z_approach} F{travel_spd}          # Move Z to safe approach height first
    G0 X{x_start} Y{y_wipe} F{travel_spd}   # Move XY to start position
    G0 Z{z_wipe} F{travel_spd}              # Lower to wipe height
    
    # Perform the wipe
    {% for wipe in range(wipe_count) %}
        G0 X{x_end} F{wipe_spd}     # Slow wipe to the right
        G0 X{x_start} F{wipe_spd}   # Slow wipe to the left
    {% endfor %}
    
    # Move up slightly to avoid catching on the brush when moving away
    G0 Z{z_wipe + 2}
    
    # Restore position
    RESTORE_GCODE_STATE NAME=WIPE_state MOVE=1 MOVE_SPEED={travel_spd / 60}

#--------------------------------------------------------------------
[gcode_macro EXHAUST_OFF]
description: Turn off exhaust fan after a delay (default: 10 minutes)
gcode:
    {% set delay = params.DELAY|default(600)|int %}
    
    # If delay is 0, turn off immediately
    {% if delay == 0 %}
        SET_FAN_SPEED FAN=fan_FumePack SPEED=0
        SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=0
        RESPOND TYPE=command MSG="Exhaust and Auxiliary fans turned off immediately"
    {% else %}
        # Otherwise schedule delayed shutdown
        UPDATE_DELAYED_GCODE ID=DELAYED_EXHAUST_OFF DURATION=0
        UPDATE_DELAYED_GCODE ID=DELAYED_EXHAUST_OFF DURATION={delay}
        RESPOND TYPE=command MSG="Exhaust fan will turn off after {delay} seconds"
    {% endif %}

#--------------------------------------------------------------------

[gcode_macro EXHAUST_ON]
description: Turn on exhaust fan and auxiliary fan for improved filtration
gcode:
    {% set exhaust_speed = params.EXHAUST_SPEED|default(0.98)|float %}
    {% set aux_speed = params.AUX_SPEED|default(0.8)|float %}
    
    SET_FAN_SPEED FAN=fan_FumePack SPEED={exhaust_speed}
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED={aux_speed}
    RESPOND TYPE=command MSG="Exhaust fan at {(exhaust_speed*100)|int}% and auxiliary fan at {(aux_speed*100)|int}% for improved filtration"

#--------------------------------------------------------------------

[delayed_gcode DELAYED_EXHAUST_OFF]                   # (this macro is NOT for Slicer Use) Delayed G-code macro to turn off the exhaust fan after a cooldown period
initial_duration: 0
gcode:
    SET_FAN_SPEED FAN=fan_FumePack SPEED=0
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=0
    RESPOND TYPE=command MSG="Exhaust and Auxiliary fans turned off after cooldown period"

#--------------------------------------------------------------------

[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.5 F3600                 ; retract filament
    
    # Move Z up first to clear any printed objects
    G90                            ; absolute positioning
    G0 Z{z_safe} F3600             ; move Z up to safe height first
    
    NOZZLE_WIPE                    ; wipe the nozzle on the purge bucket brush   
    TURN_OFF_HEATERS
    
    # Wait for temperature drop before final retraction
    {% set current_temp = printer.extruder.temperature %}
    {% set target_temp = current_temp * 0.85 %}  # Wait for 15% drop
    {% set min_temp = 180 %}  # Don't wait below this temp
    {% set final_target = [target_temp, min_temp]|max %}
    
    SET_DISPLAY_TEXT MSG="Cooling nozzle for clean retraction..."
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={final_target}
    
    G1 E-0.8 F1800                 ; slower, smaller retraction when cooler
    
    G90                                                             ; absolute positioning
    G0 X{x_safe} Y{y_safe} F20000                                   ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x - 5} Y{th.axis_maximum.y - 5} F3600      ; park nozzle at back-right corner
    M107                                                            ; turn off fan
    SET_FAN_SPEED FAN=Fan_SBtop SPEED=0
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=0
    EXHAUST_OFF                     ; Schedule delayed shutdown of exhaust fan

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#--------------------------------------------------------------------

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

#--------------------------------------------------------------------

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

#--------------------------------------------------------------------

[gcode_macro CANCEL_PRINT]
# Defines a G-code macro to cancel the actual running print
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
    G28 Y                                     # Home Y axis
    _TOOLHEAD_PARK_PAUSE_CANCEL               # Call _TOOLHEAD_PARK_PAUSE_CANCEL macro
    TURN_OFF_HEATERS                          # Turn off all heaters
    CANCEL_PRINT_BASE                         # Call CANCEL_PRINT_BASE to cancel print
    SET_FAN_SPEED FAN=Fan_SBtop SPEED=0
    SET_FAN_SPEED FAN=Fan_Aux_Side SPEED=0
    SET_FAN_SPEED FAN=fan_FumePack SPEED=0

#--------------------------------------------------------------------

[gcode_macro DATA_SAMPLE]
gcode:
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  M117 Waiting for Coil to cool to 40
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40

  M117 "Starting Phase 4 of 4"
  RESPOND TYPE=command MSG='Starting Phase 4 of 4'
  M106 S0
  G28 Z0
  G0 Z5
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data4
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=55
  CARTOGRAPHER_STREAM FILENAME=data4
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/klipper/data4 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"

#--------------------------------------------------------------------

[gcode_macro BELT_TENSION_POSITION]
description: Move the toolhead to the belt tensioning position (X175 Y99 Z130)
gcode:
    {% set x_pos = 175 %}
    {% set y_pos = 99 %}
    {% set z_pos = 130 %}
    
    # Check if the printer is homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_respond_info("Printer not homed. Homing all axes first.") }
        G28                 # Home all axes if not already homed
    {% endif %}
    
    # Move Z first to avoid potential collisions
    G90                     # Absolute positioning
    G1 Z{z_pos} F3600       # Move Z to safe height at 3600 mm/min
    
    # Then move X and Y
    G1 X{x_pos} Y{y_pos} F7200  # Move to the specified position at 7200 mm/min
    
    { action_respond_info("Toolhead moved to belt tensioning position: X=%d Y=%d Z=%d" | format(x_pos, y_pos, z_pos)) }

#--------------------------------------------------------------------

[gcode_macro SYNC_MOTORS_CHECK]
gcode:
    {% if 'motors_sync' in printer %}
        {% if not printer.motors_sync.applied %}
            SYNC_MOTORS
        {% else %}
            RESPOND TYPE=command MSG="Motors already synchronized in this session"
        {% endif %}
    {% else %}
        RESPOND TYPE=command MSG="Motors_sync module not available"
    {% endif %}

#--------------------------------------------------------------------
### Klipper installed macros
#--------------------------------------------------------------------

[motors_sync]
# Description: https://github.com/MRX8024/motors-sync/blob/main/wiki/EN.md
axes: x,y
#    Axes on which calibration will be performed.
accel_chip: adxl345
#    Accelerometer for vibrations collection: adxl345 / mpu9250 etc.
#encoder_chip_<axis>:
#    Axis, assigned encoder name, for measuring deviations.
#chip_filter: median
#    Filter type for data from the accelerometer: 'median' works well in
#    most cases, but some particularly noisy printers (fans, etc.) may
#    require a more powerful filter - 'kalman'. On lis2dw filters disabled.
#median_size: 5
#    Median filter window size.
#kalman_coeffs: 1.1, 1., 1e-1, 1e-2, .5, 1.
#    Simple coefficients describing the kalman filter.
microsteps: 32
#    Maximum microstepping displacement of the stepper motor rotor.
sync_method: synchronous
#    Methods for synchronizing two axes on interconnected kinematics:
#    'alternately' - the axes calibrated alternately, step by step. (default)
#    'synchronous' - the axes calibrated depending on their magnitude,
#    trying to keep it at the same level.
#    Methods for synchronizing axis/axes on NOT-interconnected kinematics:
#    'sequential' - axes are calibrated sequentially. (default)
#steps_model: linear, 20000, 0
#    Mathematical model and its coefficients representing the dependence
#    of stepper motor microstep displacement on the measured magnitude.
#max_step_size: 3
#    The maximum number of microsteps that the motor can take move at time,
#    to achieve the planned magnitude.
#axes_steps_diff: 4
#    The difference in the positions of the motors in microsteps between
#    the two axes, to update the magnitude of the secondary axis. It is
#    used in the synchronous method, or in the process of axis alignment
#    in the alternately method. The typical value is max_step_size + 1.
#retry_tolerance: 0.05
#    The forced threshold to which a pair of stepper motors on one belt
#    will have to lower the magnitude of the oscillations. It's recommended
#    to configure in order to filter possible inaccuracies. After several
#    iterations of starting synchronization, you will find the edge, to
#    which this parameter should be omitted.
#retries: 0
#    The maximum number of repetitions to achieve the forced threshold of
#    oscillations.
head_fan:  hotend_fan
#    Toolhead fan, which will be turned off during sync to eliminate noise.

#--------------------------------------------------------------------

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 65.399
#*# pid_ki = 2.675
#*# pid_kd = 399.753
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 34.421
#*# pid_ki = 9.446
#*# pid_kd = 33.206
#*#
#*# [scanner]
#*# scanner_touch_threshold = 750
#*# scanner_touch_speed = 3
#*#
#*# [scanner model default]
#*# model_coef = 1.4484052821325628,
#*# 	1.8797006709346484,
#*# 	0.7489720768667146,
#*# 	0.26986117311720204,
#*# 	0.33931572189144293,
#*# 	0.5803221276224013,
#*# 	-0.1907806128229818,
#*# 	-0.6130615206231455,
#*# 	0.2045933929266093,
#*# 	0.33687434638904584
#*# model_domain = 3.271912392961114e-07,3.3560086269032e-07
#*# model_range = 0.100000,5.000000
#*# model_temp = 39.129586
#*# model_offset = 0.00000
#*# model_mode = touch
#*# model_fw_version = CARTOGRAPHER 5.0.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.042650, -0.032464, -0.076553
#*# 	  -0.087429, 0.000000, 0.077838
#*# 	  -0.219992, -0.028974, 0.158764
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 320.0
#*# min_y = 30.0
#*# max_y = 320.0
